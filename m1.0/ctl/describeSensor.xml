<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
  xmlns:describeSensor="http://www.ioos.noaa.gov/sos/describeSensor"
  xmlns:ctl="http://www.occamlab.com/ctl"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:ows="http://www.opengis.net/ows/1.1" 
  xmlns:gml="http://www.opengis.net/gml" 
  xmlns:sos="http://www.opengis.net/sos/1.0"  
  xmlns:xml="http://www.w3.org/XML/1998/namespace"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:om="http://www.opengis.net/om/1.0"
  xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
  xmlns:swe="http://www.opengis.net/swe/1.0.1"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <ctl:test name="describeSensor:allTests">
    <ctl:param name="sensorMLDocument" />
    <ctl:param name="capabilitiesDocument" />
    <ctl:assertion>SensorML is valid.</ctl:assertion>
    <ctl:code>
      <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.1">
        <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
      </ctl:call-test>
      <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.2">
        <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
      </ctl:call-test>
      <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.3">
        <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
        <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument"/>
      </ctl:call-test>
    </ctl:code>
  </ctl:test>

  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.1">
    <ctl:param name="sensorMLDocument" />
    <ctl:assertion>SensorML document provides ioosTemplateVersion value in the sml:capabilities[@name=â€œioosServiceMetadata] element.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="ioosTemplateVersion" select="$sensorMLDocument/sml:capabilities[@name='ioosServiceMetadata']/swe:SimpleDataRecord/swe:field[@name='ioosTemplateVersion']" />
      <xsl:choose>
        <xsl:when test="not($ioosTemplateVersion)">
          <ctl:message>FAIL: ioosTemplateVersion not found</ctl:message>
          <ctl:fail />
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text" select="$ioosTemplateVersion/swe:Text" />
          <xsl:choose>
            <xsl:when test="not($text)">
              <ctl:message>FAIL: swe:Text not found</ctl:message>
              <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="not($text/@definition)">
                <ctl:message>FAIL: swe:Text doesn't have a definition</ctl:message>
                <ctl:fail />
              </xsl:if>
              <xsl:choose>
                <xsl:when test="$text/swe:value">
                  <xsl:if test="$text/swe:value/text() != '1.0'">
                    <ctl:message>FAIL: swe:value should be "1.0" (or do we have a new version?)</ctl:message>
                    <ctl:fail />
                  </xsl:if>
                </xsl:when>
                <xsl:otherwise>
                  <ctl:message>FAIL: swe:Text has no swe:value</ctl:message>
                  <ctl:fail />
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.2">
    <ctl:param name="sensorMLDocument" />
    <ctl:assertion>SensorML document for a network of stations provides valid reference to the EPSG::4326 CRS in gml:boundedBy/gml:Envelope</ctl:assertion>
    <ctl:code>
      <xsl:if test="starts-with($sensorMLDocument/sml:member/sml:System/gml:name, 'urn:ioos:network')">
        <xsl:variable name="gmlEnvelope" select="$sensorMLDocument/sml:member/sml:System/gml:boundedBy/gml:Envelope" />
        <xsl:choose>
          <xsl:when test="not($gmlEnvelope)">
            <ctl:message>FAIL: gml:boundedBy/gml:Envelope not found</ctl:message>
            <ctl:fail />
          </xsl:when>
          <xsl:when test="not($gmlEnvelope/@srsName)">
            <ctl:message>FAIL: gml:boundedBy/gml:Envelope/@srsName not found</ctl:message>
            <ctl:fail />
          </xsl:when>
          <xsl:when test="$gmlEnvelope/@srsName = ''">
            <ctl:message>FAIL: gml:boundedBy/gml:Envelope/@srsName is blank</ctl:message>
            <ctl:fail />
          </xsl:when>
          <xsl:when test="$gmlEnvelope/@srsName != 'http://www.opengis.net/def/crs/EPSG/0/4326'">
            <ctl:message>FAIL: gml:boundedBy/gml:Envelope/@srsName != 'http://www.opengis.net/def/crs/EPSG/0/4326'</ctl:message>
            <ctl:fail />
          </xsl:when>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.3">
    <ctl:param name="sensorMLDocument" />
    <ctl:param name="capabilitiesDocument" />
    <ctl:assertion>SensorML document for a network of stations provides valid networkID identifier, and the networkID: (a) has definition as sml:Term/ @definition='http://mmisw.org/ont/ioos/definition/networkID'; (b) has a value as URN that conforms to the IOOS Conventions for Observing Asset Identifiers; and (c) matches the gml:name value in the sos:ObservationOffering for that network in the Capabilities document.</ctl:assertion>
    <ctl:code>
      <xsl:if test="starts-with($sensorMLDocument/sml:member/sml:System/gml:name, 'urn:ioos:network')">
        <xsl:variable name="smlIdentifier" select="$sensorMLDocument/sml:member/sml:System/sml:identification/sml:IdentifierList/sml:identifier[@name='networkID']" />
        <xsl:variable name="ioosNetworkAssetUrnRegex" select="'^urn:ioos:network(:[A-Za-z0-9\._]+?){2,2}$'" />
        <xsl:choose>
          <xsl:when test="not($smlIdentifier)">
            <ctl:message>FAIL: sml:Identifier[@name='networkID'] not found</ctl:message>
            <ctl:fail />
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term)">
            <ctl:message>FAIL: sml:Identifier/sml:Term not found</ctl:message>
            <ctl:fail />
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/networkID'])">
            <ctl:message>FAIL: sml:Identifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/networkID'] not found</ctl:message>
            <ctl:fail />
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term/sml:value)">
            <ctl:message>FAIL: sml:Identifier/sml:Term/sml:value not found</ctl:message>
            <ctl:fail />
          </xsl:when>
          <xsl:when test="not(matches($smlIdentifier/sml:Term/sml:value, $ioosNetworkAssetUrnRegex))">
            <ctl:message select="concat('FAIL: sml:Identifier/sml:Term/sml:value is not a valid IOOS network urn: ', $smlIdentifier/sml:Term/sml:value)" />
            <ctl:fail />
          </xsl:when>
          <xsl:when test="not($capabilitiesDocument/sos:Contents/sos:ObservationOfferingList/sos:ObservationOffering[gml:name = $smlIdentifier/sml:Term/sml:value])">
            <ctl:message>FAIL: sml:Identifier/sml:Term/sml:value does not exist as an sos:ObservationOffering in the Capabilites response</ctl:message>
            <ctl:fail />
          </xsl:when>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
</ctl:package>

